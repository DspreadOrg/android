name: Android CI/CD

on:
  push:
    branches:
      - develop_oy  # 触发 CI/CD 的分支
  pull_request:
    branches:
      - master  # 监听到 PR 到 main 分支时触发 CI/CD

jobs:
  lint:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境

    steps:
      - name: Check out repository
        uses: actions/checkout@v2  # 检出当前仓库代码

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Run commitlint
        run: |
          if [ "${GITHUB_SHA}" = "0000000000000000000000000000000000000000" ]; then
            echo "commitlint from HEAD^"
            npx commitlint -x @commitlint/config-conventional -f HEAD^
          else
            echo "commitlint from ${GITHUB_SHA}"
            npx commitlint -x @commitlint/config-conventional -f "${GITHUB_SHA}"
          fi

  build:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境

    steps:
      - name: Check out repository
        uses: actions/checkout@v3  # 检出当前仓库代码

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'  # 指定 Java 发行版

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          build-tools: 30.0.3

       #  缓存 Gradle 依赖项
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

       #  解码并保存 keystore 文件
      - name: Decode and Save Keystore
        run: |
          echo "${{ vars.KEYSTORE_FILE }}" | base64 -d > pos_android_studio_demo/app.keystore

      - name: Build the release signed APK
        run: |
            cd pos_android_studio_demo
            chmod +x ./gradlew
            ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app.keystore \
            -Pandroid.injected.signing.store.password=${{ vars.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ vars.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ vars.KEY_PASSWORD }}

      # 保存生成的 APK 文件
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pos_android_studio_app-release
          path: pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release/pos_android_studio_app-release.apk

      - name: List APK files
        run: ls -R pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release  # 列出 APK 文件，确保路径正确
          
  upload_to_github:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (again for the next job)
        uses: actions/checkout@v2

      - name: Create a new Git tag
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"  # 使用当前时间戳生成一个标签
          git tag $TAG_NAME  # 创建新的标签
          git push origin $TAG_NAME  # 推送标签到远程仓库
    
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: pos_android_studio_app-release  # 下载上一步上传的 APK artifact
      - name: Upload APK to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: pos_android_studio_demo/pos_android_studio_app/build/outputs/apk/release/pos_android_studio_app-release.apk  # 上传 APK 到 GitHub Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行认证
          
  release:
    runs-on: ubuntu-latest
    needs: [build]  # 依赖于 build 作业的成功

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Semantic Release and dependencies
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog conventional-changelog-conventionalcommits --force

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  deploy:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境
    needs: [build]  # 部署依赖于构建作业成功

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Deploy to the server or another location
        run: |
          echo "Deploying APK or other artifacts"
          # 可以根据需要替换为实际的部署步骤，例如上传到服务器或云平台等

