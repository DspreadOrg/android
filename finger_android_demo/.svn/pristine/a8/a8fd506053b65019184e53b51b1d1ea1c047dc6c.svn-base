package com.example.finger_android_demo;

import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import android.annotation.SuppressLint;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.hardware.usb.UsbRequest;
import android.os.Handler;
import android.os.Message;
import android.widget.Toast;

public class USBClass2 {

	private static UsbManager mManager = null;
	private UsbEndpoint usbEpOut;//代表写数据节点
	private UsbEndpoint usbEpIn;//代表读的数据节点
	private byte[] sendBytes;
	private byte[] receiveBytes;
	private static HashMap<String, UsbDevice> mdevices;
	private UsbDeviceConnection connection = null;
	private Context mContext;
	private UsbInterface mUsbInterface;
	
	public USBClass2(Context mContext){
		this.mContext=mContext;
	}
	protected static HashMap<String, UsbDevice> getMdevices() {
		return mdevices;
	}

	private static PendingIntent mPermissionIntent;
	private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
	private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {

		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if (ACTION_USB_PERMISSION.equals(action)) {
				synchronized (this) {
					UsbDevice device = (UsbDevice) intent
							.getParcelableExtra(UsbManager.EXTRA_DEVICE);
					if (intent.getBooleanExtra(
							UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
						if (device != null) {
							// call method to set up device communication
							L.i("usb"+ "permission granted for device "
									+ device);
						}
					} else {
						L.i("usb"+ "permission denied for device " + device);
					}
				}
			}
		}
	};

	@SuppressLint("NewApi")
	public ArrayList<String> GetUSBDevices(Context context) {
		mManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);
		
		
		mdevices = new HashMap<String, UsbDevice>();
		ArrayList<String> deviceList = new ArrayList<String>();
		mPermissionIntent = PendingIntent.getBroadcast(context, 0, new Intent(
				"com.android.example.USB_PERMISSION"), 0);
		IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
		context.registerReceiver(mUsbReceiver, filter);
 
		// check for existing devices
		for (UsbDevice device : mManager.getDeviceList().values()) {
			// 判断是否有权限
	        if(!mManager.hasPermission(device)) {
	            // 打开设备，获取 UsbDeviceConnection 对象，连接设备，用于后面的通讯
	        	mManager.requestPermission(device, mPermissionIntent);
	            return null;
	        }
	        for(int i=0;i<device.getInterfaceCount();i++){
	        	UsbInterface usbInterface=device.getInterface(i);
	        	mUsbInterface=usbInterface;
	        	if(i==0 && mUsbInterface!=null){
	        		if(mUsbInterface.getEndpoint(0)!=null){
	    				usbEpIn=mUsbInterface.getEndpoint(0);
	    			}
	        	}
	        	if(i==1 && mUsbInterface!=null){
	        		 if(mUsbInterface.getEndpoint(1)!=null){
	     	        	usbEpOut=mUsbInterface.getEndpoint(1);
	     	        }
	        	}
	        }
	       
			String deviceName = null;
			if (device.getVendorId() == 0x225d || device.getProductId() == 0x0008 )
			{
				connection = mManager.openDevice(device);
				if(connection.claimInterface(mUsbInterface, true)){//进行端点设置和通讯
					Toast.makeText(mContext, "找到设备接口", Toast.LENGTH_SHORT).show();
//					getEnpoint(mUsbInterface);
				}
//				byte[] rawBuf = new byte[255];
//				int len = connection.controlTransfer(0x80, 0x06, 0x0302,
//						0x0409, rawBuf, 0x00FF, 60);
//				rawBuf = Arrays.copyOfRange(rawBuf, 2, len);
//				deviceName = new String(rawBuf);
				deviceName=device.getDeviceName();
				deviceList.add(deviceName);
				mdevices.put(deviceName, device);
			}

		}
		context.unregisterReceiver(mUsbReceiver);
		return deviceList;
	}
	
	@SuppressLint("NewApi")
	public synchronized void sendToUsb(String content){
//		sendBytes = content.getBytes();
		sendBytes = content.getBytes();
		L.d("sendBytes" +sendBytes[0]);
//		Toast.makeText(mContext,sendBytes[0], Toast.LENGTH_SHORT).show();
        int ret = 0;
        L.d("usbEpOut+"+usbEpOut);
        // 发送准备命令
        ret = connection.bulkTransfer(usbEpOut, sendBytes, sendBytes.length, 1500);
        Toast.makeText(mContext,"ret1"+ret, Toast.LENGTH_SHORT).show();
        L.d("ret1: " +ret);
        // 接收发送成功信息(相当于读取设备数据)
        receiveBytes = new byte[usbEpIn.getMaxPacketSize()];   //根据设备实际情况写数据大小
        ret = connection.bulkTransfer(usbEpIn, receiveBytes, receiveBytes.length, 1500);
        Toast.makeText(mContext,"ret2"+ret, Toast.LENGTH_SHORT).show();
        L.d("ret2: " +ret);
	}
	
	
	
	@SuppressLint("NewApi")
	public synchronized void receiveToUsb(){
		 //读取数据2
        int outMax = usbEpOut.getMaxPacketSize();
        int inMax = usbEpIn.getMaxPacketSize();
        ByteBuffer byteBuffer = ByteBuffer.allocate(inMax);
        UsbRequest usbRequest = new UsbRequest();
        usbRequest.initialize(connection, usbEpIn);
        usbRequest.queue(byteBuffer, inMax);
        if (connection.requestWait() == usbRequest) {
            byte[] retData = byteBuffer.array();
            try {
                Toast.makeText(mContext, "收到数据：" + new String(retData, "UTF-8"), Toast.LENGTH_LONG).show();
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }
	}
	
}
